# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Run Test Suite

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  # Uses Python Framework build because on macos matplotlib requires it
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
    - uses: s-weigand/setup-conda@v1
      with:
        activate-conda: true
    # TODO: fix adding the different versions  
    # Pick the installation of Python Framework build from conda, because they do not support versioning
    # https://anaconda.org/anaconda/python.app/files
    #- name: Install conda python version 3.6
    #  if: matrix.python-version == '3.6'
    #  run: conda install http://repo.continuum.io/pkgs/main/osx-64/python.app-2-py36_10.tar.bz2
    #- name: Install conda python version 3.7
    #  if: matrix.python-version == '3.7'
    #  run: conda install http://repo.continuum.io/pkgs/main/osx-64/python.app-2-py37_10.tar.bz2
    #- name: Install conda python version 3.8
    #  if: matrix.python-version == '3.8'
    #  run: conda install http://repo.continuum.io/pkgs/main/osx-64/python.app-2-py38_10.tar.bz2
    - name: Install pythonw
      run: conda install python.app
    - name: Python Version Info
      run: |
        pythonw --version
        which python
        pythonw -m site --user-site
        echo $PYTHONPATH
        echo $PYTHONHOME
    - name: Install dependencies
      run: |
        brew install imagemagick
        # needed for installing matplotlib
        brew install pkg-config
        python -m pip install --upgrade wheel setuptools coveralls
        python -m pip install ".[test, optional]"

    - name: Test with pytest
      run: |
        pythonw -m pytest --doctest-glob "moviepy/**/**.py" -v --cov moviepy --cov-report term-missing

    - name: Coveralls
      run: coveralls
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COVERALLS_SERVICE_NAME: github


  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get ImageMagick installer from cache
        id: imagemagick-installer-cache
        uses: actions/cache@v2
        with:
          path: |
            ImageMagick.exe
          key: ${{ runner.os }}-latest

      - name: Download ImageMagick installer
        shell: cmd
        if: steps.imagemagick-installer-cache.outputs.cache-hit != 'true'
        run: |
          python3 scripts/get-latest-imagemagick-win.py >im-url.txt
          set /p IMAGEMAGICK_URL= <im-url.txt
          rm im-url.txt
          echo %IMAGEMAGICK_URL%
          curl %IMAGEMAGICK_URL% -o ImageMagick.exe

      - name: Install ImageMagick
        id: imagemagick-install
        shell: cmd
        run: |
          set IMAGEMAGICK_INSTALL_DIR=%CD%\imagemagick
          mkdir %IMAGEMAGICK_INSTALL_DIR%
          echo %IMAGEMAGICK_INSTALL_DIR%

          ImageMagick.exe /SILENT /SP /DIR=%IMAGEMAGICK_INSTALL_DIR%
          dir imagemagick

          move imagemagick\ffmpeg.exe ffmpeg.exe
          move imagemagick\magick.exe convert.exe

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade wheel setuptools coveralls
          python -m pip install ".[test]"

      - name: Check third party dependencies
        run: |
          python moviepy\config.py

      - name: PyTest
        shell: cmd
        run: |
          python -m pytest --cov moviepy --cov-report term-missing

      - name: Coveralls
        run: coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: github

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Python Version Info
        run: |
          python --version
          which python
          python -m site --user-site

      - name: Install common requirements
        run: |
          python -m pip install --upgrade wheel setuptools

      - name: Install test requirements
        if: ${{ matrix.python-version == '3.7' }}
        run: |
          python -m pip install ".[test, doc]"
          python -m pip install python-dotenv

      - name: Install test and optional requirements
        if: ${{ matrix.python-version != '3.7' }}
        run: |
          python -m pip install ".[test, optional, doc]"

      - name: Configure ImageMagick policy
        run: |
          cat /etc/ImageMagick-6/policy.xml \
          | sed 's/none/read,write/g' \
          | sudo tee /etc/ImageMagick-6/policy.xml

      - name: PyTest
        run: |
          python -m pytest --doctest-glob "moviepy/**/**.py" --cov moviepy --cov-report term-missing

      - name: Test pip installation
        run: |
          pip install -e .
          pip install -e .[optional]
          pip install -e .[test]
          pip install -e .[doc]

      - name: Coveralls
        run: coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_SERVICE_NAME: github
  armv64_py38_job:
     name: Build and Test for arm64 with py38
     runs-on: ubuntu-20.04
     strategy:
      matrix:
        python-version: [ 3.8]
      fail-fast: false
     steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
      - name: Install and Run tests
        run: |
               docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
               arm64v8/ubuntu:20.04 \
               bash -exc 'apt-get update && apt-get -y install python3.8 curl git && \
                ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && export DEBIAN_FRONTEND=noninteractive && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata && \
                apt-get -y install software-properties-common && add-apt-repository ppa:deadsnakes/ppa && apt-get -y update && \
                apt install -y python3.8-venv && python3.8 -m venv venv38 && source venv38/bin/activate && \
                python3.8 -m pip install --upgrade pip && \
                python3.8 --version && \
                uname -m && \
                python3.8 -m pip install pytest && \
                python3.8 setup.py install && \
                python3.8 -m pip install --upgrade wheel setuptools && \
                python3.8 -m pip install python-dotenv && \
                python3.8 -m pip install -e .[test] && \
                python3.8 -m pip install ".[test, optional, doc]" && \
                apt install ffmpeg -y && \
                apt install imagemagick -y && \
                cat /etc/ImageMagick-6/policy.xml \
                | sed 's/none/read,write/g' \
                | tee /etc/ImageMagick-6/policy.xml && \
                python3.8 -m pytest --doctest-glob "moviepy/**/**.py" --cov moviepy --cov-report term-missing && \
                deactivate'
